///////////////////////////
// 322. Coin Change     //
//////////////////////////
class Solution {
    
    //a claasic backpack problem
    // dp[i] means the number of coins that makes $i
    public int coinChange(int[] coins, int amount) {
       int[] dp = new int[amount + 1];
       Arrays.fill(dp, Integer.MAX_VALUE - 1); 
       dp[0] = 0; 
        
       for(int i = 0; i < coins.length; i++){
         for(int j = 0; j <= amount; j++){
           if(j - coins[i] >= 0) 
               dp[j] = Math.min(dp[j], dp[j - coins[i]] + 1); 
         } 
       } 
       return dp[amount] > amount ? -1 : dp[amount];
    }
}


///////////////////////////
// 518. Coin Change 2  //
//////////////////////////

class Solution {
    // when amount = 0, return 1... it's ridiculous
    public int change(int amount, int[] coins) {
        int[] dp = new int[amount + 1];
        dp[0] = 1;
        
        // bfs
        for (int i = 0; i < coins.length; i++)
            for (int j = 1; j <= amount; j++)
                if (j - coins[i] >= 0)
                    dp[j] += dp[j - coins[i]];
        
        return dp[amount];
    }
}